#define CATCH_CONFIG_MAIN

#include "catch.hpp"
#include "../ConnectFour/connect_four.h"

TEST_CASE ("choose column chooses the right column", "[choose_column]" ) {
    GameMatch* match = new GameMatch();
    AI* ai = new AI();
    int result = ai->choose_column(match);
    SECTION ("choose_column returns a value within game board bounds") {
        REQUIRE(result < match->get_width());
        REQUIRE(result >= 0);
        result = ai->choose_column(match);
        REQUIRE(result < match->get_width());
        REQUIRE(result >= 0);
        result = ai->choose_column(match);
        REQUIRE(result < match->get_width());
        REQUIRE(result >= 0);
        result = ai->choose_column(match);
        REQUIRE(result < match->get_width());
        REQUIRE(result >= 0);
        result = ai->choose_column(match);
        REQUIRE(result < match->get_width());
        REQUIRE(result >= 0);
        result = ai->choose_column(match);
        REQUIRE(result < match->get_width());
        REQUIRE(result >= 0);
        result = ai->choose_column(match);
        REQUIRE(result < match->get_width());
        REQUIRE(result >= 0);
        result = ai->choose_column(match);
        REQUIRE(result < match->get_width());
        REQUIRE(result >= 0);
        result = ai->choose_column(match);
        REQUIRE(result < match->get_width());
        REQUIRE(result >= 0);
    }

    SECTION ("chooses the column that blocks a match win") {
        match->drop_token(0, true);
        match->drop_token(1, true);
        match->drop_token(2, true);
        match->drop_token(ai->choose_column(match), false); //player 2 should block the winning move
        REQUIRE (match->drop_token(3, true) == 0); //a return of 0 for no win means p2 blocked
    }

    SECTION ("chooses the column that wins the match") {
        match->drop_token(0, true);
        match->drop_token(1, true);
        match->drop_token(2, true);
        match->drop_token(0, false);
        match->drop_token(0, false);
        match->drop_token(0, false);
        REQUIRE (match->drop_token(ai->choose_column(match), false) == 2); //player 2 should win instead of block
    }

    delete(match);
    delete(ai);
}

TEST_CASE ("check buff contents", "[grid_to_buff]") {
    GameMatch* match = new GameMatch();
    AI* ai = new AI();

    SECTION ("") {
        int col = ai->choose_column(match, true);
        ai->grid_to_buff(col);
    }

    SECTION ("") {
        match->drop_token(0, true);
        match->drop_token(0, false);
        match->drop_token(1, true);
        match->drop_token(5, false);
        match->drop_token(0, true);
    }

    delete(match);
    delete(ai);
}

